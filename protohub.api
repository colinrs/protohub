syntax = "v1"

// user ===================================
@server (
	prefix: /api/v1/public
	group:  publicuser
)
service protohub-api {
	// Log in | 登录
	@handler login
	post /user/login (LoginRequest) returns (LoginResponse)

	// Log in by email | 邮箱登录
	@handler loginByEmail
	post /user/login_by_email (LoginByEmailRequest) returns (LoginResponse)

	// Log in by SMS | 短信登录
	@handler loginBySms
	post /user/login_by_sms (LoginBySmsRequest) returns (LoginResponse)

	// Register | 注册
	@handler register
	post /user/register (RegisterRequest)

	// Register by Email | 邮箱注册
	@handler registerByEmail
	post /user/register_by_email (RegisterByEmailRequest)

	// Register by SMS | 短信注册
	@handler registerBySms
	post /user/register_by_sms (RegisterBySmsRequest)

	// Reset password by Email | 通过邮箱重置密码
	@handler resetPasswordByEmail
	post /user/reset_password_by_email (ResetPasswordByEmailRequest)

	// Reset password by Sms | 通过短信重置密码
	@handler resetPasswordBySms
	post /user/reset_password_by_sms (ResetPasswordBySmsRequest)
}

@server (
	group:  user
	prefix: /api/v1
)
service protohub-api {
	// Create user information | 创建用户
	@handler createUser
	post /user/create (CreateUserRequest)

	// Update user information | 更新用户
	@handler updateUser
	post /user/update (UpdateUserRequest)

	// Delete user information | 删除用户信息
	@handler deleteUser
	post /user/delete (DeleteUsersByIDsRequest)

	// Get user list | 获取用户列表
	@handler getUserList
	post /user/list (UserListRequest) returns (UserListResponse)

	// Get User by ID | 通过ID获取用户
	@handler getUserById
	get /user (GetUserByIDRequest) returns (GetUserByIDResponse)

	// Change Password | 修改密码
	@handler changePassword
	post /user/change_password (ChangePasswordRequest)

	// Get user basic information | 获取用户基本信息
	@handler getUserInfo
	get /user/info returns (GetUserInfoResponse)

	// Get user's permission code | 获取用户权限码
	@handler getUserPermCode
	get /user/perm returns (GetPermCodeResponse)

	// Get user's profile | 获取用户个人信息
	@handler getUserProfile
	get /user/profile returns (GetUserProfileResponse)

	// Update user's profile | 更新用户个人信息
	@handler updateUserProfile
	post /user/profile (UpdateUserProfileRequest) returns (UpdateUserProfileResponse)

	// Log out | 退出登陆
	@handler logout
	get /user/logout

	// Refresh token | 获取刷新 token
	@handler refreshToken
	get /user/refresh_token returns (RefreshTokenResponse)

	// Access token | 获取短期 token
	@handler accessToken
	get /user/access_token returns (AccessTokenResponse)
}

// user ===================================
// file ===================================
@server (
	prefix: /api/v1/file
	group:  file
)
service protohub-api {
	@handler UploadHandler
	post /upload (FileUploadRequest) returns (FileUploadResponse)

	@handler DownloadHandler
	get /download (FileDownloadRequest)

	@handler List
	get /list (FileListRequest) returns (FileListResponse)

	@handler Detail
	get /detail (FileDetailRequest) returns (FileDetailResponse)
}

// file ===================================
// role ===================================
@server (
	group:  role
	prefix: /api/v1
)
service protohub-api {
	// Create role information | 创建角色
	@handler createRole
	post /role/create (CreateRoleRequest)

	// Update role information | 更新角色
	@handler updateRole
	post /role/update (UpdateRoleRequest)

	// Delete role information | 删除角色信息
	@handler deleteRole
	post /role/delete (DeleteRoleRequest)

	// Get role list | 获取角色列表
	@handler getRoleList
	get /role/list (GetRoleListRequest) returns (GetRoleListResponse)

	// Get Role by ID | 通过ID获取角色
	@handler getRoleById
	get /role (GetRoleByIdRequest) returns (GetRoleByIdResponse)
}

// role ===================================
// base  ===================================
type PageLimit {
	Page     int `form:"page,optional,default=1"`
	PageSize int `form:"page_size,optional,default=10"`
}

type BaseUUIDInfo {
	// ID
	Id *string `json:"id,optional"`
	// Create date | 创建日期
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | 更新日期
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// The base ID response data | 基础ID信息
type BaseIDInfo {
	// ID
	Id *uint64 `json:"id,optional"`
	// Create date | 创建日期
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | 更新日期
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// base  ===================================
// user  ===================================
type UserInfo {
	BaseUUIDInfo
	// Status | 状态
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Username | 用户名
	Username *string `json:"username,optional" validate:"omitempty,max=50"`
	// Nickname | 昵称
	Nickname *string `json:"nickname,optional" validate:"omitempty,max=40"`
	// Password | 密码
	Password *string `json:"password,optional" validate:"omitempty,min=6"`
	// Description | 描述
	Description *string `json:"description,optional" validate:"omitempty,max=100"`
	// HomePath | 首页
	HomePath *string `json:"home_path,optional" validate:"omitempty,max=70"`
	// RoleId | 角色ID
	RoleIds []uint64 `json:"role_ids,optional"`
	// Mobile | 手机号
	Mobile *string `json:"mobile,optional" validate:"omitempty,max=18"`
	// Email | 邮箱
	Email *string `json:"email,optional" validate:"omitempty,max=80"`
	// Avatar | 头像地址
	Avatar *string `json:"avatar,optional" validate:"omitempty,max=300"`
	// Department ID | 部门ID
	DepartmentId *uint64 `json:"department_id,optional"`
	// Position ID | 职位ID
	PositionIds []uint64 `json:"position_id,optional"`
}

type CreateUserRequest {
	UserInfo
}

type UpdateUserRequest {
	UserInfo
}

// Basic UUID array request | 基础UUID数组参数请求
type DeleteUsersByIDsRequest {
	// Ids
	// Required: true
	Ids []string `json:"ids"`
}

type UserListRequest {
	PageLimit
	// User Name | 用户名
	Username *string `json:"username,optional" validate:"omitempty,alphanum,max=20"`
	// User's nickname | 用户的昵称
	Nickname *string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"`
	// User's mobile phone number | 用户的手机号码
	Mobile *string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`
	// The user's email address | 用户的邮箱
	Email *string `json:"email,optional" validate:"omitempty,email,max=100"`
	// User's role ID | 用户的角色ID
	RoleIds []uint64 `json:"role_ids,optional"`
	// The user's department ID | 用户所属部门ID
	DepartmentId *uint64 `json:"department_id,optional"`
	// User's position id | 用户的职位ID
	PositionId *uint64 `json:"position_id,optional"`
}

type UserListResponse {
	Total int `json:"total"`
	// User list data | User列表数据
	List []*UserInfo `json:"list"`
}

// Basic UUID request | 基础UUID参数请求
type GetUserByIDRequest {
	Id string `form:"id" validate:"len=36"`
}

type GetUserByIDResponse {
	UserInfo
}

type ChangePasswordRequest {
	// User's old password | 用户旧密码
	OldPassword string `json:"old_password" validate:"required,max=30"`
	// User's new password | 用户新密码
	NewPassword string `json:"new_password" validate:"required,max=30"`
}

type GetUserInfoResponse {
	// The  data of user's basic information | 用户基本信息
	// User's UUID | 用户的UUID
	UUID *string `json:"user_id"`
	// User's name | 用户名
	Username *string `json:"username"`
	// User's nickname | 用户的昵称
	Nickname *string `json:"nickname"`
	// The user's avatar path | 用户的头像路径
	Avatar *string `json:"avatar"`
	// The home page that the user enters after logging in | 用户登陆后进入的首页
	HomePath *string `json:"home_path"`
	// The description of user | 用户的描述信息
	Description *string `json:"desc"`
	// User's Role Name | 用户的角色名称
	RoleName []string `json:"role_name"`
	// Department Name | 部门名称
	DepartmentName string `json:"department_name,optional"`
}

type GetPermCodeResponse {
	// Permission code data | 权限码数据
	List []string `json:"list"`
}

// The profile response data | 个人信息返回数据
type GetUserProfileResponse {
	// The profile information | 个人信息
	// user's nickname | 用户的昵称
	Nickname *string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	// The user's avatar path | 用户的头像路径
	Avatar *string `json:"avatar" validate:"omitempty,max=300"`
	// User's mobile phone number | 用户的手机号码
	Mobile *string `json:"mobile" validate:"omitempty,numeric,max=18"`
	// The user's email address | 用户的邮箱
	Email *string `json:"email" validate:"omitempty,email,max=100"`
}

// The log in information | 登陆返回的数据信息
type LoginInfo {
	// User's UUID | 用户的UUID
	UserId string `json:"user_id"`
	// Token for authorization | 验证身份的token
	Token string `json:"token"`
	// Expire timestamp | 过期时间戳
	Expire uint64 `json:"expire"`
}

type RoleInfoSimple {
	// Role name | 角色名
	RoleName string `json:"roleName"`
	// Role value | 角色值
	Value string `json:"value"`
}

type LoginRequest {
	// User Name | 用户名
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | 验证码编号, 存在redis中
	CaptchaId string `json:"captcha_id"  validate:"required,len=20"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha" validate:"required,len=5"`
}

// The log in response data | 登录返回数据
type LoginResponse {
	// User's UUID | 用户的UUID
	UserId string `json:"user_id"`
	// Token for authorization | 验证身份的token
	Token string `json:"token"`
	// Expire timestamp | 过期时间戳
	Expire uint64 `json:"expire"`
}

// Log in by email request | 邮箱登录参数
type LoginByEmailRequest {
	// The user's email address | 用户的邮箱
	Email string `json:"email" validate:"required,email,max=100"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// Log in by SMS request | 短信登录参数
type LoginBySmsRequest {
	// The user's mobile phone number | 用户的手机号码
	PhoneNumber string `json:"phone_number"  validate:"required,numeric,max=20"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

type RegisterRequest {
	// User Name | 用户名
	Username string `json:"user_name" validate:"required,alphanum,max=20"`
	// Password | 密码
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | 验证码编号, 存在redis中
	CaptchaId string `json:"captcha_id" validate:"required,len=20"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | 用户的邮箱
	Email string `json:"email" validate:"required,email,max=100"`
}

type RegisterByEmailRequest {
	// User Name | 用户名
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | 用户的邮箱
	Email string `json:"email" validate:"required,email,max=100"`
}

// Register by SMS request | 短信注册参数
type RegisterBySmsRequest {
	// User Name | 用户名
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | 用户输入的验证码
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's mobile phone number | 用户的手机号码
	PhoneNumber string `json:"phone_number"  validate:"required,numeric,max=20"`
}

// Reset password by email request | 通过邮箱重置密码请求
type ResetPasswordByEmailRequest {
	Email    string `json:"email" validate:"email"`
	Captcha  string `json:"captcha"`
	Password string `json:"password"`
}

// Reset password by SMS request | 通过短信重置密码请求
type ResetPasswordBySmsRequest {
	PhoneNumber string `json:"phone_number"`
	Captcha     string `json:"captcha"`
	Password    string `json:"password"`
}

type UpdateUserProfileRequest {
	// user's nickname | 用户的昵称
	Nickname *string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	// The user's avatar path | 用户的头像路径
	Avatar *string `json:"avatar" validate:"omitempty,max=300"`
	// User's mobile phone number | 用户的手机号码
	Mobile *string `json:"mobile" validate:"omitempty,numeric,max=18"`
	// The user's email address | 用户的邮箱
	Email *string `json:"email" validate:"omitempty,email,max=100"`
}

// The profile response data | 个人信息返回数据
type UpdateUserProfileResponse {
	// The profile information | 个人信息
	// user's nickname | 用户的昵称
	Nickname *string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	// The user's avatar path | 用户的头像路径
	Avatar *string `json:"avatar" validate:"omitempty,max=300"`
	// User's mobile phone number | 用户的手机号码
	Mobile *string `json:"mobile" validate:"omitempty,numeric,max=18"`
	// The user's email address | 用户的邮箱
	Email *string `json:"email" validate:"omitempty,email,max=100"`
}

// Refresh token response data | 刷新令牌响应数据
type RefreshTokenResponse {
	// The token information | 令牌信息
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expired_at"`
}

type AccessTokenResponse {
	// The token information | 令牌信息
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expired_at"`
}

// user  ===================================
// file  ===================================
type FileUploadRequest {
	ProjectName string `form:"project_name"`
	ServiceName string `form:"service_name"`
	Branch      string `form:"branch"`
	FileName    string `form:"file_name"`
	Creator     string `form:"creator"`
}

type FileUploadResponse {}

type FileDownloadRequest {
	FileID int `form:"file_id"`
}

type FileDownloadResponse {}

type FileListRequest {
	PageLimit
	ProjectName string `form:"project_name"`
	ServiceName string `form:"service_name"`
}

type FileListData {
	ProjectName string `json:"project_name"`
	ServiceName string `json:"service_name"`
	Branch      string `json:"branch"`
	FileName    string `json:"file_name"`
	FileID      int    `json:"file_id"`
	Creator     string `json:"creator"`
	UpdateAt    string `json:"update_at"`
}

type FileListResponse {
	List  []*FileListData `json:"list"`
	Total int             `json:"total"`
}

type FileDetailRequest {
	FileID int `form:"file_id"`
}

type FileDetailResponse {
	ProjectName string `json:"project_name"`
	ServiceName string `json:"service_name"`
	Branch      string `json:"branch"`
	FileName    string `json:"file_name"`
	FileID      int    `json:"file_id"`
	Content     string `json:"content"`
	creator     string `json:"creator"`
	UpdateAt    string `json:"update_at"`
}

// file  ===================================
// role  ===================================
type RoleInfoResp {
	RoleInfo
}

// Basic IDs request | 基础ID数组参数请求
type IDsReq {
	IDs []uint64 `json:"ids"`
}

// The response data of role information | 角色信息
type RoleInfo {
	BaseIDInfo
	// Translated Name | 展示名称
	Trans string `json:"trans,optional"`
	// Status | 状态
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Name | 角色名称
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
	// Role code | 角色码
	Code *string `json:"code,optional" validate:"omitempty,max=20"`
	// DefaultRouter | 默认首页
	DefaultRouter *string `json:"default_router,optional" validate:"omitempty,max=80"`
	// Remark | 备注
	Remark *string `json:"remark,optional" validate:"omitempty,max=200"`
	// Sort | 排序
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
}

type CreateRoleRequest {
	// Name | 角色名称
	Name   string `json:"name" validate:"max=30"`
	Remark string `json:"remark,optional" validate:"omitempty,max=200"`
}

type UpdateRoleRequest {
	RoleInfo
}

type DeleteRoleRequest {
	IDsReq
}

type GetRoleListRequest {
	PageLimit
	// Name | 角色名称
	Name string `form:"name,optional"`
}

type GetRoleListResponse {
	Total int `json:"total"`
	// The API list data | 角色列表数据
	List []*RoleInfo `json:"list"`
}

type GetRoleByIdRequest {
	ID uint64 `form:"id"`
}

type GetRoleByIdResponse {
	RoleInfo
}

